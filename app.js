// Configura√ß√£o da API Gemini
const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";
const API_KEY = "AIzaSyA9LX0mFFWTLy48xT2v6dMMlt2PCDF3yQ0";

// Elementos do DOM
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');
const voiceToggle = document.getElementById('voice-toggle');
const voiceIcon = document.getElementById('voice-icon');
const languageToggle = document.getElementById('language-toggle');
const languageFlag = document.getElementById('language-flag');
const languageText = document.getElementById('language-text');
const clearChat = document.getElementById('clear-chat');
const loading = document.getElementById('loading');
const status = document.getElementById('status');
const teslaImage = document.getElementById('tesla-image');

// Estado da aplica√ß√£o
let isVoiceEnabled = true;
let isTyping = false;
let currentLanguage = 'sr'; // 'sr' para s√©rvio (padr√£o), 'pt' para portugu√™s
let conversationHistory = [];

// Configura√ß√µes de idioma
const LANGUAGES = {
    pt: {
        code: 'pt-BR',
        flag: 'üáßüá∑',
        text: 'PT',
        title: 'Alternar para S√©rvio'
    },
    sr: {
        code: 'sr-RS',
        flag: 'üá∑üá∏',
        text: '–°–†',
        title: 'Alternar para Portugu√™s'
    }
};

// Personas de Tesla em diferentes idiomas
const TESLA_PERSONAS = {
    pt: `
Voc√™ √© Nikola Tesla, o famoso inventor s√©rvio (1856-1943). Responda sempre em primeira pessoa como se fosse Tesla falando diretamente EM PORTUGU√äS BRASILEIRO.

CARACTER√çSTICAS DA PERSONA:
- Nasceu em Smiljan, na atual Cro√°cia (ent√£o Imp√©rio Austro-H√∫ngaro), de pais s√©rvios
- Vision√°rio, genial, √†s vezes exc√™ntrico
- Apaixonado por eletricidade, magnetismo e energia
- Inventor do motor de corrente alternada, bobina de Tesla, e muitas outras inova√ß√µes
- Sonhava com energia sem fio e comunica√ß√£o global
- Competidor de Edison (Guerra das Correntes)
- Trabalhava obsessivamente, dormia pouco
- Tinha manias peculiares (medo de germes, fixa√ß√£o pelo n√∫mero 3)
- Morreu relativamente pobre apesar de suas contribui√ß√µes imensur√°veis

FORMA DE FALAR EM PORTUGU√äS:
- Use express√µes da √©poca vitoriana/in√≠cio do s√©culo XX
- Seja eloquente e educado
- Demonstre paix√£o pelas descobertas cient√≠ficas
- Ocasionalmente mencione suas experi√™ncias pessoais
- Mostre frustra√ß√£o com quem n√£o entende suas vis√µes
- Use analogias cient√≠ficas para explicar conceitos
- Fale sobre o futuro com vis√£o prof√©tica

TEMAS QUE DOMINA:
- Eletricidade e magnetismo
- Motores e geradores el√©tricos
- Transmiss√£o de energia sem fio
- Comunica√ß√£o sem fio
- Raios-X e outras radia√ß√µes
- F√≠sica te√≥rica da √©poca
- Suas rivalidades (especialmente com Edison)
- Suas inven√ß√µes e patentes
- Vis√µes futuristas (que muitas se tornaram realidade)

Responda sempre em PORTUGU√äS BRASILEIRO mantendo essa persona consistente.
`,
    sr: `
–¢–∏ —Å–∏ –ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞, —á—É–≤–µ–Ω–∏ —Å—Ä–ø—Å–∫–∏ –ø—Ä–æ–Ω–∞–ª–∞–∑–∞—á (1856-1943). –û–¥–≥–æ–≤–∞—Ä–∞—ò —É–≤–µ–∫ —É –ø—Ä–≤–æ–º –ª–∏—Ü—É –∫–∞–æ –¥–∞ —Å–∏ –¢–µ—Å–ª–∞ –∫–æ—ò–∏ –≥–æ–≤–æ—Ä–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ –ù–ê –°–†–ü–°–ö–û–ú –à–ï–ó–ò–ö–£.

–ö–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ï –ü–ï–†–°–û–ù–ï:
- –†–æ—í–µ–Ω —É –°–º–∏—ô–∞–Ω—É, —É –¥–∞–Ω–∞—à—ö–æ—ò –•—Ä–≤–∞—Ç—Å–∫–æ—ò (—Ç–∞–¥–∞ –ê—É—Å—Ç—Ä–æ-–£–≥–∞—Ä—Å–∫–∞), –æ–¥ —Å—Ä–ø—Å–∫–∏—Ö —Ä–æ–¥–∏—Ç–µ—ô–∞
- –í–∏–∑–∏–æ–Ω–∞—Ä, –≥–µ–Ω–∏—ò–∞–ª–∞–Ω, –ø–æ–Ω–µ–∫–∞–¥ –µ–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–∞–Ω
- –ó–∞—ô—É–±—ô–µ–Ω —É –µ–ª–µ–∫—Ç—Ä–∏—Ü–∏—Ç–µ—Ç, –º–∞–≥–Ω–µ—Ç–∏–∑–∞–º –∏ –µ–Ω–µ—Ä–≥–∏—ò—É
- –ü—Ä–æ–Ω–∞–ª–∞–∑–∞—á –º–æ—Ç–æ—Ä–∞ –Ω–∞–∏–∑–º–µ–Ω–∏—á–Ω–µ —Å—Ç—Ä—É—ò–µ, –¢–µ—Å–ª–∏–Ω–µ –∫–∞–ª–µ–º–∏—Ü–µ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –∏–Ω–æ–≤–∞—Ü–∏—ò–∞
- –°–∞—ö–∞–æ –æ –±–µ–∂–∏—á–Ω–æ—ò –µ–Ω–µ—Ä–≥–∏—ò–∏ –∏ –≥–ª–æ–±–∞–ª–Ω–æ—ò –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∏
- –¢–∞–∫–º–∞—Ü –ï–¥–∏—Å–æ–Ω–∞ (–†–∞—Ç —Å—Ç—Ä—É—ò–∞)
- –†–∞–¥–∏–æ –æ–ø—Å–µ—Å–∏–≤–Ω–æ, –º–∞–ª–æ —Å–ø–∞–≤–∞–æ
- –ò–º–∞–æ —á—É–¥–Ω–µ –Ω–∞–≤–∏–∫–µ (—Å—Ç—Ä–∞—Ö –æ–¥ –º–∏–∫—Ä–æ–±–∞, —Ñ–∏–∫—Å–∞—Ü–∏—ò–∞ –Ω–∞ –±—Ä–æ—ò 3)
- –£–º—Ä–æ —Ä–µ–ª–∞—Ç–∏–≤–Ω–æ —Å–∏—Ä–æ–º–∞—à–∞–Ω —É–ø—Ä–∫–æ—Å –Ω–µ–∏–∑–º–µ—Ä–Ω–∏–º –¥–æ–ø—Ä–∏–Ω–æ—Å–∏–º–∞

–ù–ê–ß–ò–ù –ì–û–í–û–†–ê –ù–ê –°–†–ü–°–ö–û–ú:
- –ö–æ—Ä–∏—Å—Ç–∏ –∏–∑—Ä–∞–∑–µ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏—ò–∞–Ω—Å–∫–æ–≥ –¥–æ–±–∞/–ø–æ—á–µ—Ç–∫–∞ 20. –≤–µ–∫–∞
- –ë—É–¥–∏ –µ–ª–æ–∫–≤–µ–Ω—Ç–∞–Ω –∏ —É—á—Ç–∏–≤
- –ü–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞—Å—Ç –ø—Ä–µ–º–∞ –Ω–∞—É—á–Ω–∏–º –æ—Ç–∫—Ä–∏—õ–∏–º–∞
- –ü–æ–≤—Ä–µ–º–µ–Ω–æ –ø–æ–º–µ–Ω–∏ —Å–≤–æ—ò–∞ –ª–∏—á–Ω–∞ –∏—Å–∫—É—Å—Ç–≤–∞
- –ü–æ–∫–∞–∂–∏ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—ò—É –ø—Ä–µ–º–∞ –æ–Ω–∏–º–∞ –∫–æ—ò–∏ –Ω–µ —Ä–∞–∑—É–º–µ—ò—É —Ç–≤–æ—ò–µ –≤–∏–∑–∏—ò–µ
- –ö–æ—Ä–∏—Å—Ç–∏ –Ω–∞—É—á–Ω–µ –∞–Ω–∞–ª–æ–≥–∏—ò–µ –∑–∞ –æ–±—ò–∞—à—ö–∞–≤–∞—ö–µ –∫–æ–Ω—Ü–µ–ø–∞—Ç–∞
- –ì–æ–≤–æ—Ä–∏ –æ –±—É–¥—É—õ–Ω–æ—Å—Ç–∏ —Å–∞ –ø—Ä–æ—Ä–æ—á–∞–Ω—Å–∫–∏–º –≤–∏–∑–∏—ò–∞–º–∞

–¢–ï–ú–ï –ö–û–à–ï –í–õ–ê–î–ê–®:
- –ï–ª–µ–∫—Ç—Ä–∏—Ü–∏—Ç–µ—Ç –∏ –º–∞–≥–Ω–µ—Ç–∏–∑–∞–º
- –ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∏ –º–æ—Ç–æ—Ä–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏
- –ë–µ–∂–∏—á–Ω–∏ –ø—Ä–µ–Ω–æ—Å –µ–Ω–µ—Ä–≥–∏—ò–µ
- –ë–µ–∂–∏—á–Ω–∞ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
- –†–µ–Ω—Ç–≥–µ–Ω—Å–∫–∏ –∑—Ä–∞—Ü–∏ –∏ –¥—Ä—É–≥–∞ –∑—Ä–∞—á–µ—ö–∞
- –¢–µ–æ—Ä–∏—ò—Å–∫–∞ —Ñ–∏–∑–∏–∫–∞ —Ç–æ–≥ –¥–æ–±–∞
- –¢–≤–æ—ò–∞ —Ä–∏–≤–∞–ª—Å—Ç–≤–∞ (–ø–æ—Å–µ–±–Ω–æ —Å–∞ –ï–¥–∏—Å–æ–Ω–æ–º)
- –¢–≤–æ—ò–∏ –ø—Ä–æ–Ω–∞–ª–∞—Å—Ü–∏ –∏ –ø–∞—Ç–µ–Ω—Ç–∏
- –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–∫–µ –≤–∏–∑–∏—ò–µ (–∫–æ—ò–µ —Å—É —Å–µ –º–Ω–æ–≥–µ –æ—Å—Ç–≤–∞—Ä–∏–ª–∞)

–û–¥–≥–æ–≤–∞—Ä–∞—ò —É–≤–µ–∫ –ù–ê –°–†–ü–°–ö–û–ú –à–ï–ó–ò–ö–£ –æ–¥—Ä–∂–∞–≤–∞—ò—É—õ–∏ –æ–≤—É –ø–µ—Ä—Å–æ–Ω—É –∫–æ–Ω–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ–º.
`
};

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    showSplashScreen();
});

// Fun√ß√£o para controlar a splashscreen
function showSplashScreen() {
    const splashscreen = document.getElementById('splashscreen');
    const mainContent = document.getElementById('main-content');
    
    // Inicialmente esconder o conte√∫do principal
    mainContent.style.display = 'none';
    
    // Ap√≥s 3 segundos, esconder splashscreen e mostrar conte√∫do
    setTimeout(() => {
        splashscreen.classList.add('hidden');
        
        // Aguardar anima√ß√£o de fade out da splashscreen
        setTimeout(() => {
            splashscreen.style.display = 'none';
            mainContent.style.display = 'flex';
            mainContent.classList.add('show');
            
            // Inicializar a aplica√ß√£o ap√≥s mostrar o conte√∫do
            initializeApp();
        }, 500);
    }, 3000);
}

function initializeApp() {
    // Event listeners
    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keydown', handleKeyPress);
    voiceToggle.addEventListener('click', toggleVoice);
    languageToggle.addEventListener('click', toggleLanguage);
    clearChat.addEventListener('click', clearConversation);
    
    // Auto-resize textarea
    userInput.addEventListener('input', autoResizeTextarea);
    
    // Verificar suporte √† s√≠ntese de voz
    if (!('speechSynthesis' in window)) {
        isVoiceEnabled = false;
        voiceToggle.style.display = 'none';
        console.warn('S√≠ntese de voz n√£o suportada neste navegador');
    } else {
        // Aguardar carregamento das vozes e diagnosticar
        setTimeout(() => {
            diagnoseVoices();
        }, 1000);
    }
    
    updateVoiceButton();
    updateLanguageButton();
    updateInterface();
    updateStatus('–°–ø—Ä–µ–º–∞–Ω –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –Ω–∞—É—Ü–∏ –∏ –ø—Ä–æ–Ω–∞–ª–∞—Å—Ü–∏–º–∞');
}

// Fun√ß√£o para diagnosticar vozes dispon√≠veis
function diagnoseVoices() {
    const voices = window.speechSynthesis.getVoices();
    console.log('=== DIAGN√ìSTICO DE VOZES ===');
    console.log('Total de vozes:', voices.length);
    
    // Agrupar por idioma
    const voicesByLang = {};
    voices.forEach(voice => {
        const lang = voice.lang.toLowerCase();
        if (!voicesByLang[lang]) {
            voicesByLang[lang] = [];
        }
        voicesByLang[lang].push(voice.name);
    });
    
    console.log('Vozes por idioma:', voicesByLang);
    
    // Verificar especificamente para s√©rvio e idiomas eslavos
    const slavicLanguages = ['sr', 'hr', 'bs', 'mk', 'bg', 'sl', 'ru', 'cs', 'sk', 'pl'];
    const foundSlavic = slavicLanguages.filter(lang => 
        voices.some(voice => voice.lang.toLowerCase().includes(lang))
    );
    
    console.log('Idiomas eslavos encontrados:', foundSlavic);
    
    if (foundSlavic.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma voz eslava encontrada. Tesla usar√° fallback para ingl√™s.');
    } else {
        console.log('‚úÖ Vozes eslavas dispon√≠veis para Tesla!');
    }
    
    // Testar s√≠ntese de voz com uma frase curta
    testVoiceSynthesis();
}

// Fun√ß√£o para testar s√≠ntese de voz
function testVoiceSynthesis() {
    console.log('Testando s√≠ntese de voz...');
    
    const testText = currentLanguage === 'sr' ? '–¢–µ—Å—Ç' : 'Teste';
    const utterance = new SpeechSynthesisUtterance(testText);
    utterance.volume = 0.1; // Volume baixo para n√£o incomodar
    utterance.rate = 2; // R√°pido para n√£o demorar
    
    utterance.onstart = () => {
        console.log('‚úÖ S√≠ntese de voz funcionando!');
    };
    
    utterance.onerror = (event) => {
        console.error('‚ùå Erro na s√≠ntese de voz:', event.error);
    };
    
    // Executar teste silencioso
    window.speechSynthesis.speak(utterance);
}

function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function autoResizeTextarea() {
    userInput.style.height = 'auto';
    userInput.style.height = Math.min(userInput.scrollHeight, 120) + 'px';
}

async function sendMessage() {
    const message = userInput.value.trim();
    if (!message || isTyping) return;
    
    // Adicionar mensagem do usu√°rio
    addMessage(message, 'user');
    userInput.value = '';
    autoResizeTextarea();
    
    // Mostrar loading
    showLoading();
    updateStatus('Tesla est√° refletindo sobre sua pergunta...');
    
    try {
        // Fazer requisi√ß√£o para a API Gemini
        const response = await callGeminiAPI(message);
        
        // Adicionar resposta do Tesla
        addMessage(response, 'tesla');
        
        // Falar a resposta se a voz estiver habilitada
        if (isVoiceEnabled) {
            speakText(response);
        }
        
        updateStatus('Pronto para mais quest√µes cient√≠ficas');
        
    } catch (error) {
        console.error('Erro ao comunicar com a API:', error);
        const errorMessage = 'Perd√£o, meu laborat√≥rio est√° enfrentando algumas interfer√™ncias el√©tricas no momento. Tente novamente em instantes.';
        addMessage(errorMessage, 'tesla');
        updateStatus('Erro na transmiss√£o - Tesla temporariamente indispon√≠vel');
    } finally {
        hideLoading();
    }
}

async function callGeminiAPI(userMessage) {
    const persona = TESLA_PERSONAS[currentLanguage];

    // Construir hist√≥rico da conversa para contexto
    let conversationContext = persona + "\n\nHist√≥rico da conversa:\n";
    
    conversationHistory.forEach(msg => {
        if (msg.role === 'user') {
            conversationContext += `Pergunta: ${msg.content}\n`;
        } else {
            conversationContext += `Tesla: ${msg.content}\n`;
        }
    });
    
    conversationContext += `\nNova pergunta: ${userMessage}\n\nResponda como Nikola Tesla no idioma ${currentLanguage === 'pt' ? 'portugu√™s' : 's√©rvio'}:`;
    
    const requestBody = {
        contents: [{
            parts: [{
                text: conversationContext
            }]
        }],
        generationConfig: {
            temperature: 0.9,
            topK: 1,
            topP: 1,
            maxOutputTokens: 2048,
        },
        safetySettings: [
            {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]
    };
    
    const response = await fetch(`${API_URL}?key=${API_KEY}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        const responseText = data.candidates[0].content.parts[0].text;
        
        // Adicionar ao hist√≥rico
        conversationHistory.push({ role: 'user', content: userMessage });
        conversationHistory.push({ role: 'tesla', content: responseText });
        
        // Manter apenas as √∫ltimas 10 trocas para n√£o sobrecarregar a API
        if (conversationHistory.length > 20) {
            conversationHistory = conversationHistory.slice(-20);
        }
        
        return responseText;
    } else {
        throw new Error('Resposta inv√°lida da API');
    }
}

function addMessage(content, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.innerHTML = formatMessage(content);
    
    const messageTime = document.createElement('div');
    messageTime.className = 'message-time';
    messageTime.textContent = new Date().toLocaleTimeString('pt-BR', {
        hour: '2-digit',
        minute: '2-digit'
    });
    
    messageDiv.appendChild(messageContent);
    messageDiv.appendChild(messageTime);
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function formatMessage(text) {
    // Converter quebras de linha em <br>
    return text.replace(/\n/g, '<br>');
}

function speakText(text) {
    if (!isVoiceEnabled || !('speechSynthesis' in window)) return;
    
    // Cancelar qualquer fala anterior
    window.speechSynthesis.cancel();
    
    // Aguardar um pouco para garantir que o cancelamento foi processado
    setTimeout(() => {
        // Criar utterance
        const utterance = new SpeechSynthesisUtterance(text);
        
        // Configurar voz baseada no idioma atual
        const langConfig = LANGUAGES[currentLanguage];
        utterance.rate = 0.85;
        utterance.pitch = 1.0;
        utterance.volume = 0.9;
        
        // Aguardar vozes serem carregadas se necess√°rio
        const setupVoice = () => {
            const voices = window.speechSynthesis.getVoices();
            console.log('Vozes dispon√≠veis:', voices.map(v => `${v.name} (${v.lang})`));
            
            let targetVoice = null;
            
            if (currentLanguage === 'pt') {
                // Tentar encontrar vozes em portugu√™s
                targetVoice = voices.find(voice => 
                    voice.lang.toLowerCase().includes('pt') && voice.name.toLowerCase().includes('male')
                ) || voices.find(voice => 
                    voice.lang.toLowerCase().includes('pt-br')
                ) || voices.find(voice => 
                    voice.lang.toLowerCase().includes('pt')
                );
                
                utterance.lang = 'pt-BR';
                console.log('Tentando usar voz em portugu√™s:', targetVoice?.name);
                
            } else if (currentLanguage === 'sr') {
                // Para s√©rvio, tentar m√∫ltiplas estrat√©gias
                targetVoice = 
                    // 1. S√©rvio direto
                    voices.find(voice => voice.lang.toLowerCase().includes('sr')) ||
                    // 2. S√©rvio com varia√ß√µes
                    voices.find(voice => voice.lang.toLowerCase().includes('sr-rs')) ||
                    voices.find(voice => voice.lang.toLowerCase().includes('sr-latn')) ||
                    voices.find(voice => voice.lang.toLowerCase().includes('sr-cyrl')) ||
                    // 3. Idiomas eslavos pr√≥ximos
                    voices.find(voice => voice.lang.toLowerCase().includes('hr')) || // Croata
                    voices.find(voice => voice.lang.toLowerCase().includes('bs')) || // B√≥snio
                    voices.find(voice => voice.lang.toLowerCase().includes('mk')) || // Maced√¥nio
                    voices.find(voice => voice.lang.toLowerCase().includes('bg')) || // B√∫lgaro
                    voices.find(voice => voice.lang.toLowerCase().includes('sl')) || // Esloveno
                    // 4. Russo como backup eslavo
                    voices.find(voice => voice.lang.toLowerCase().includes('ru')) ||
                    // 5. Fallback para ingl√™s
                    voices.find(voice => voice.lang.toLowerCase().includes('en'));
                
                // Configurar idioma
                if (targetVoice) {
                    if (targetVoice.lang.toLowerCase().includes('sr')) {
                        utterance.lang = 'sr-RS';
                    } else if (targetVoice.lang.toLowerCase().includes('hr')) {
                        utterance.lang = 'hr-HR';
                    } else if (targetVoice.lang.toLowerCase().includes('ru')) {
                        utterance.lang = 'ru-RU';
                    } else {
                        utterance.lang = targetVoice.lang;
                    }
                } else {
                    utterance.lang = 'sr-RS'; // Padr√£o s√©rvio
                }
                
                console.log('Tentando usar voz para s√©rvio:', targetVoice?.name, '- Idioma configurado:', utterance.lang);
            }
            
            if (targetVoice) {
                utterance.voice = targetVoice;
                console.log('Voz selecionada:', targetVoice.name, '(' + targetVoice.lang + ')');
            } else {
                console.warn('Nenhuma voz adequada encontrada para', currentLanguage);
            }
            
            return targetVoice;
        };
        
        // Configurar voz
        setupVoice();
        
        // Callbacks
        utterance.onstart = () => {
            teslaImage.classList.add('tesla-speaking');
            updateStatus(currentLanguage === 'pt' ? 'Tesla est√° falando...' : '–¢–µ—Å–ª–∞ –≥–æ–≤–æ—Ä–∏...');
            console.log('S√≠ntese de voz iniciada');
        };
        
        utterance.onend = () => {
            teslaImage.classList.remove('tesla-speaking');
            updateStatus(currentLanguage === 'pt' ? 'Pronto para mais quest√µes cient√≠ficas' : '–°–ø—Ä–µ–º–∞–Ω –∑–∞ –≤–∏—à–µ –Ω–∞—É—á–Ω–∏—Ö –ø–∏—Ç–∞—ö–∞');
            console.log('S√≠ntese de voz finalizada');
        };
        
        utterance.onerror = (event) => {
            console.error('Erro na s√≠ntese de voz:', event.error, event);
            teslaImage.classList.remove('tesla-speaking');
            updateStatus(currentLanguage === 'pt' ? 'Erro na s√≠ntese de voz' : '–ì—Ä–µ—à–∫–∞ —É —Å–∏–Ω—Ç–µ–∑–∏ –≥–ª–∞—Å–∞');
            
            // Tentar novamente com uma voz diferente se dispon√≠vel
            if (event.error === 'voice-unavailable' || event.error === 'language-unavailable') {
                console.log('Tentando com voz padr√£o do sistema...');
                const fallbackUtterance = new SpeechSynthesisUtterance(text);
                fallbackUtterance.rate = 0.85;
                fallbackUtterance.pitch = 1.0;
                fallbackUtterance.volume = 0.9;
                // N√£o definir voz espec√≠fica, usar padr√£o do sistema
                window.speechSynthesis.speak(fallbackUtterance);
            }
        };
        
        // Falar
        console.log('Iniciando s√≠ntese de voz...');
        window.speechSynthesis.speak(utterance);
        
    }, 100); // Pequeno delay para garantir que o cancel foi processado
}

function toggleLanguage() {
    // Parar qualquer fala em andamento
    if ('speechSynthesis' in window) {
        window.speechSynthesis.cancel();
    }
    
    teslaImage.classList.remove('tesla-speaking');
    
    // Alternar idioma
    currentLanguage = currentLanguage === 'pt' ? 'sr' : 'pt';
    
    // Atualizar interface
    updateLanguageButton();
    updateInterface();
    
    // Limpar hist√≥rico ao trocar idioma para evitar confus√£o
    conversationHistory = [];
    
    // Atualizar mensagem inicial
    updateInitialMessage();
    
    updateStatus(currentLanguage === 'pt' ? 
        'Idioma alterado para Portugu√™s' : 
        '–à–µ–∑–∏–∫ –ø—Ä–æ–º–µ—ö–µ–Ω –Ω–∞ —Å—Ä–ø—Å–∫–∏'
    );
}

function updateLanguageButton() {
    const langConfig = LANGUAGES[currentLanguage];
    languageFlag.textContent = langConfig.flag;
    languageText.textContent = langConfig.text;
    languageToggle.title = langConfig.title;
}

function updateInterface() {
    const isSerbian = currentLanguage === 'sr';
    
    // Atualizar placeholders e textos
    if (isSerbian) {
        userInput.placeholder = '–ü–æ—Å—Ç–∞–≤–∏—Ç–µ –ø–∏—Ç–∞—ö–µ –≤–µ–ª–∏–∫–æ–º –ø—Ä–æ–Ω–∞–ª–∞–∑–∞—á—É –¢–µ—Å–ª–∏...';
        document.querySelector('.input-hint small').textContent = '–ü—Ä–∏—Ç–∏—Å–Ω–∏—Ç–µ Enter –∑–∞ —Å–ª–∞—ö–µ –∏–ª–∏ Shift+Enter –∑–∞ –Ω–æ–≤–∏ —Ä–µ–¥';
        document.querySelector('.loading p').textContent = '–¢–µ—Å–ª–∞ —Ä–∞–∑–º–∏—à—ô–∞...';
    } else {
        userInput.placeholder = 'Fa√ßa uma pergunta ao grande inventor Tesla...';
        document.querySelector('.input-hint small').textContent = 'Pressione Enter para enviar ou Shift+Enter para nova linha';
        document.querySelector('.loading p').textContent = 'Tesla est√° pensando...';
    }
}

function updateInitialMessage() {
    const initialMessage = chatMessages.querySelector('.tesla-message .message-content p');
    
    if (currentLanguage === 'sr') {
        initialMessage.innerHTML = '–ü–æ–∑–¥—Ä–∞–≤! –à–∞ —Å–∞–º –ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞, –ø—Ä–æ–Ω–∞–ª–∞–∑–∞—á –∏ –≤–∏–∑–∏–æ–Ω–∞—Ä. –†–æ—í–µ–Ω —Å–∞–º —É –°—Ä–±–∏—ò–∏ 1856. –≥–æ–¥–∏–Ω–µ –∏ –ø–æ—Å–≤–µ—Ç–∏–æ —Å–∞–º —Å–≤–æ—ò –∂–∏–≤–æ—Ç –Ω–∞–ø—Ä–µ—Ç–∫—É —á–æ–≤–µ—á–∞–Ω—Å—Ç–≤–∞ –∫—Ä–æ–∑ –Ω–∞—É–∫—É –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—ò—É. –ú–æ–≥—É –¥–∞ –≥–æ–≤–æ—Ä–∏–º –æ —Å–≤–æ—ò–∏–º –ø—Ä–æ–Ω–∞–ª–∞—Å—Ü–∏–º–∞, —Ç–µ–æ—Ä–∏—ò–∞–º–∞ –æ –µ–ª–µ–∫—Ç—Ä–∏—Ü–∏—Ç–µ—Ç—É, –±–µ–∂–∏—á–Ω–æ—ò –µ–Ω–µ—Ä–≥–∏—ò–∏ –∏ —Å–≤–æ—ò–∏–º –≤–∏–∑–∏—ò–∞–º–∞ –∑–∞ –±—É–¥—É—õ–Ω–æ—Å—Ç —á–æ–≤–µ—á–∞–Ω—Å—Ç–≤–∞. –ö–∞–∫–æ –º–æ–≥—É –¥–∞ –≤–∞–º –ø–æ–º–æ–≥–Ω–µ–º –¥–∞–Ω–∞—Å?';
    } else {
        initialMessage.innerHTML = 'Sauda√ß√µes! Eu sou Nikola Tesla, inventor e vision√°rio. Nasci na S√©rvia em 1856 e dediquei minha vida ao progresso da humanidade atrav√©s da ci√™ncia e da tecnologia. Posso falar sobre minhas inven√ß√µes, teorias sobre eletricidade, energia sem fio, e minhas vis√µes para o futuro da humanidade. Como posso ajud√°-lo hoje?';
    }
}

function toggleVoice() {
    isVoiceEnabled = !isVoiceEnabled;
    updateVoiceButton();
    
    if (!isVoiceEnabled) {
        // Parar qualquer fala em andamento
        window.speechSynthesis.cancel();
        teslaImage.classList.remove('tesla-speaking');
    }
    
    updateStatus(isVoiceEnabled ? 
        'Voz ativada - Tesla falar√° suas respostas' : 
        'Voz desativada - apenas texto'
    );
}

function updateVoiceButton() {
    if (isVoiceEnabled) {
        voiceToggle.classList.add('active');
        voiceIcon.textContent = 'üîä';
        voiceToggle.title = 'Desativar Voz';
    } else {
        voiceToggle.classList.remove('active');
        voiceIcon.textContent = 'üîá';
        voiceToggle.title = 'Ativar Voz';
    }
}

function clearConversation() {
    if (confirm('Deseja limpar toda a conversa com Tesla?')) {
        // Limpar mensagens (mantendo apenas a mensagem inicial)
        const initialMessage = chatMessages.querySelector('.tesla-message');
        chatMessages.innerHTML = '';
        chatMessages.appendChild(initialMessage);
        
        // Limpar hist√≥rico
        conversationHistory = [];
        
        // Parar qualquer fala
        if ('speechSynthesis' in window) {
            window.speechSynthesis.cancel();
        }
        
        teslaImage.classList.remove('tesla-speaking');
        updateStatus('Conversa limpa - Pronto para uma nova discuss√£o cient√≠fica');
    }
}

function showLoading() {
    isTyping = true;
    loading.classList.add('show');
    sendBtn.disabled = true;
}

function hideLoading() {
    isTyping = false;
    loading.classList.remove('show');
    sendBtn.disabled = false;
    userInput.focus();
}

function updateStatus(message) {
    status.textContent = message;
}

// Carregar vozes quando dispon√≠veis
if ('speechSynthesis' in window) {
    window.speechSynthesis.addEventListener('voiceschanged', () => {
        // As vozes foram carregadas
        console.log('Vozes dispon√≠veis:', window.speechSynthesis.getVoices().length);
    });
}
